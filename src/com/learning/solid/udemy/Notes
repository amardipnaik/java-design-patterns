Single responsibility principle (SRP):
 -A Class should have only one reason to change.
 -Separation of concern:Different classes handling different, independent problem/task.
 -A class should have only a single responsibility, that is, only changes to one part
  of the software's specification should be able to affect the specification of the class.

Openâ€“closed principle (OCP):
 -Classes should be open for extensions but close for modifications.
 -Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.

Liskov substitution principle (LSP):
 -Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.
 -You should be able to substitute a base type for subtype.

Interface segregation principle (ISP):
 -Many client-specific interfaces are better than one general-purpose interface.
 -Don't put to much into interface , split into different interface.
 -YAGNI: You ain't going to need it.

Dependency inversion principle (DIP):
 -High-level modules should not depend on low-level modules. Both should depend on abstractions.
 -Abstractions should not depend on details. Details should depend on abstractions.